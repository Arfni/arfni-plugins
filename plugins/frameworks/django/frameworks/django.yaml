# Framework Definition for Django
# This file defines how Django appears in the ARFNI GUI

apiVersion: v0.1

metadata:
  name: django
  displayName: Django
  description: High-level Python web framework with batteries included
  version: 4.2
  author: arfni-community
  icon: assets/django-icon.png
  category: runtime
  tags:
    - python
    - backend
    - orm
    - admin
    - web-framework

# Auto-detection rules (how to detect Django projects)
detection:
  files:
    - manage.py
    - requirements.txt
  patterns:
    - "*/settings.py"
    - "*/wsgi.py"
    - "*/asgi.py"
  file_content:
    - file: requirements.txt
      contains: "Django"
    - file: requirements.txt
      contains: "django"

# Project analysis rules (extract configuration from existing project)
analysis:
  - type: regex
    file: requirements.txt
    pattern: 'Django==(\d+\.\d+)'
    capture: django_version

  - type: regex
    file: requirements.txt
    pattern: 'Python\s*>=?\s*(\d+\.\d+)'
    capture: python_version

  - type: regex
    file: "*/settings.py"
    pattern: "ALLOWED_HOSTS\\s*=\\s*\\[(.*?)\\]"
    capture: allowed_hosts

# Default service configuration when dropped on canvas
serviceTemplate:
  kind: docker.container
  spec:
    build:
      context: "."
      dockerfile: Dockerfile

    ports:
      - "8000:8000"

    environment:
      DEBUG: "False"
      SECRET_KEY: "${DJANGO_SECRET_KEY}"
      DATABASE_URL: "postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/django_db"
      ALLOWED_HOSTS: "*"

    volumes:
      - host: ./media
        mount: /app/media
      - host: ./static
        mount: /app/static

    health:
      httpGet:
        path: /health/
        port: 8000
      initialDelaySeconds: 30
      periodSeconds: 10

# Dockerfile template
dockerfile:
  template: |
    # Multi-stage Dockerfile for Django
    # Build stage
    FROM python:{{python_version}}-slim AS build

    WORKDIR /app

    # Install system dependencies
    RUN apt-get update && apt-get install -y \
        gcc \
        postgresql-client \
        libpq-dev \
        python3-dev \
        && rm -rf /var/lib/apt/lists/*

    # Install Python dependencies
    COPY requirements.txt .
    RUN pip install --no-cache-dir --upgrade pip && \
        pip install --no-cache-dir -r requirements.txt

    # Production stage
    FROM python:{{python_version}}-slim

    WORKDIR /app

    # Install runtime dependencies
    RUN apt-get update && apt-get install -y \
        libpq5 \
        curl \
        && rm -rf /var/lib/apt/lists/*

    # Create non-root user
    RUN useradd -m -u 1000 django && \
        chown -R django:django /app

    # Copy installed packages from build stage
    COPY --from=build /usr/local/lib/python{{python_version}}/site-packages /usr/local/lib/python{{python_version}}/site-packages
    COPY --from=build /usr/local/bin /usr/local/bin

    # Copy application code
    COPY --chown=django:django . .

    # Create directories for media and static files
    RUN mkdir -p /app/media /app/static && \
        chown -R django:django /app/media /app/static

    # Switch to non-root user
    USER django

    # Collect static files
    RUN python manage.py collectstatic --noinput || echo "No static files to collect"

    EXPOSE 8000

    # Health check
    HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
        CMD curl -f http://localhost:8000/health/ || exit 1

    # Run with gunicorn
    CMD ["gunicorn", \
         "--bind", "0.0.0.0:8000", \
         "--workers", "{{workers | default: 4}}", \
         "--timeout", "120", \
         "--access-logfile", "-", \
         "--error-logfile", "-", \
         "{{wsgi_application | default: 'myproject.wsgi:application'}}"]

  variables:
    python_version:
      default: "3.11"
      from_analysis: python_version
      description: "Python runtime version"

    workers:
      default: 4
      description: "Number of Gunicorn workers"

    wsgi_application:
      default: "myproject.wsgi:application"
      description: "WSGI application path"

# Property form for GUI (when user configures the node)
propertyForm:
  - name: pythonVersion
    label: Python Version
    type: select
    options:
      - "3.9"
      - "3.10"
      - "3.11"
      - "3.12"
    default: "3.11"
    description: "Python runtime version"

  - name: port
    label: Port
    type: number
    default: 8000
    description: "Application port"

  - name: debug
    label: Debug Mode
    type: boolean
    default: false
    description: "Enable Django debug mode (not for production)"

  - name: secretKey
    label: Secret Key
    type: secret
    default: "${DJANGO_SECRET_KEY}"
    description: "Django secret key for cryptographic signing"

  - name: workers
    label: Gunicorn Workers
    type: number
    default: 4
    description: "Number of Gunicorn worker processes"

  - name: enableAdmin
    label: Enable Admin Panel
    type: boolean
    default: true
    description: "Enable Django admin interface"

# Common dependencies (suggested when adding Django)
commonDependencies:
  - postgres
  - redis
  - nginx

# Secrets this framework requires
secrets:
  - DJANGO_SECRET_KEY
  - DATABASE_PASSWORD
  - POSTGRES_PASSWORD

# Example configurations
examples:
  - name: Basic Django
    description: Simple Django application
    spec:
      ports:
        - "8000:8000"
      env:
        DEBUG: "True"

  - name: Django + PostgreSQL
    description: Django with PostgreSQL database
    dependencies:
      - postgres
    spec:
      ports:
        - "8000:8000"
      env:
        DEBUG: "False"
        DATABASE_URL: "postgresql://postgres:pass@postgres:5432/mydb"

  - name: Production Setup
    description: Full production setup with Nginx and Redis
    dependencies:
      - postgres
      - redis
      - nginx
    spec:
      ports:
        - "8000:8000"
      env:
        DEBUG: "False"
        REDIS_URL: "redis://redis:6379/0"
        ALLOWED_HOSTS: "example.com,www.example.com"

# Middleware and extensions
middleware:
  - name: CORS
    package: django-cors-headers
    description: "Handle Cross-Origin Resource Sharing"

  - name: REST Framework
    package: djangorestframework
    description: "Build Web APIs"

  - name: Celery
    package: celery
    description: "Distributed task queue"

# Common Django commands
commands:
  - name: makemigrations
    description: "Create new migrations"
    command: "python manage.py makemigrations"

  - name: migrate
    description: "Apply database migrations"
    command: "python manage.py migrate"

  - name: createsuperuser
    description: "Create admin user"
    command: "python manage.py createsuperuser --noinput"

  - name: collectstatic
    description: "Collect static files"
    command: "python manage.py collectstatic --noinput"

  - name: shell
    description: "Open Django shell"
    command: "python manage.py shell"
